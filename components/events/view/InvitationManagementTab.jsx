import React, { useState, useEffect } from "react";
import { Mail, MessageSquare, Phone, Volume2, Plus, Send, Users, CreditCard, ChevronDown, ChevronRight, ShoppingCart, Trash2 } from "lucide-react";
import VoiceRecorder from "../../VoiceRecorder";
import Button from "../../Button";
import useGetUserCreditsManager from "@/app/events/controllers/creditManagement/getUserCreditsController";
import { PurchaseCreditsManager } from "@/app/events/controllers/creditManagement/purchaseCreditsController";
import { useGetCreditPricingManager } from "@/app/events/controllers/creditManagement/getCreditPricingController";
import useGetDiscountsManager from "@/app/admin/settings/controllers/getDiscountsController";
import { EditEventManager } from "@/app/events/controllers/editEventController";
import useFileUpload from "@/utils/fileUploadController";
import Loader from "../../Loader";

const InvitationManagementTab = ({ event, eventId }) => {
  const [activeTab, setActiveTab] = useState("send");
  const [selectedChannels, setSelectedChannels] = useState([]);
  const [voiceRecording, setVoiceRecording] = useState(null);
  const [showVoiceRecorder, setShowVoiceRecorder] = useState(false);
  const [autoReminder, setAutoReminder] = useState(event?.auto_settings?.auto_reminder?.active || false);
  const [autoThankYou, setAutoThankYou] = useState(event?.auto_settings?.auto_thankyou?.active || false);
  const [reminderRecording, setReminderRecording] = useState(null); // Will hold the file blob
  const [thankYouRecording, setThankYouRecording] = useState(null); // Will hold the file blob
  const [existingReminderUrl, setExistingReminderUrl] = useState(event?.auto_settings?.auto_reminder?.recording || "");
  const [existingThankYouUrl, setExistingThankYouUrl] = useState(event?.auto_settings?.auto_thankyou?.recording || "");
  const [reminderChannels, setReminderChannels] = useState({
    email: event?.reminder_notification?.email || false,
    sms: event?.reminder_notification?.sms || false,
    whatsapp: event?.reminder_notification?.whatsapp || false,
    voice: event?.reminder_notification?.voice || false
  });
  const [thankYouChannels, setThankYouChannels] = useState({
    email: event?.thankyou_notification?.email || false,
    sms: event?.thankyou_notification?.sms || false,
    whatsapp: event?.thankyou_notification?.whatsapp || false,
    voice: event?.thankyou_notification?.voice || false
  });
  const [selectedGroups, setSelectedGroups] = useState([]);
  const [expandedGroups, setExpandedGroups] = useState({});
  const [cart, setCart] = useState([]);

  // Fetch user credits, pricing, and discounts directly from backend
  const { data: userCredits, isLoading: loadingUserCredits } = useGetUserCreditsManager({ enabled: true });
  const { data: creditPricing, isLoading: loadingPricing } = useGetCreditPricingManager();
  const { data: discounts, isLoading: loadingDiscounts } = useGetDiscountsManager();
  const { purchaseCredits, isLoading: purchasingCredits, data: purchaseData, isSuccess: purchaseSuccess } = PurchaseCreditsManager();
  const { updateEvent, isLoading: updatingEvent } = EditEventManager({ eventId });
  const { handleFileUpload, isLoading: uploadingFile } = useFileUpload();

  // Mock guest groups - auto-generated by event
  const guestGroups = [
    { 
      id: "current", 
      name: "Current Event Guests (Uninvited)", 
      count: 25, 
      eventName: event?.name || "Current Event",
      guests: [
        { id: 1, name: "John Doe", email: "john@example.com", phone: "+1234567890" },
        { id: 2, name: "Jane Smith", email: "jane@example.com", phone: "+1234567891" },
        { id: 3, name: "Bob Johnson", email: "bob@example.com", phone: "+1234567892" },
      ]
    },
    { 
      id: "wedding2023", 
      name: "Wedding 2023 Guests", 
      count: 50, 
      eventName: "Wedding 2023",
      guests: [
        { id: 4, name: "Alice Brown", email: "alice@example.com", phone: "+1234567893" },
        { id: 5, name: "Charlie Wilson", email: "charlie@example.com", phone: "+1234567894" },
      ]
    },
    { 
      id: "birthday2024", 
      name: "Birthday Party Guests", 
      count: 30, 
      eventName: "Birthday Party 2024",
      guests: [
        { id: 6, name: "David Lee", email: "david@example.com", phone: "+1234567895" },
        { id: 7, name: "Emma Davis", email: "emma@example.com", phone: "+1234567896" },
      ]
    }
  ];

  // Get credits directly from backend data - using correct field names from API response
  const invitationCredits = {
    email: userCredits?.data?.invitation_email_balance || 0,
    sms: userCredits?.data?.invitation_sms_balance || 0,
    whatsapp: userCredits?.data?.invitation_whatsapp_balance || 0,
    voice: userCredits?.data?.invitation_voice_balance || 0
  };

  const notificationCredits = {
    email: userCredits?.data?.notification_email_balance || 0,
    sms: userCredits?.data?.notification_sms_balance || 0,
    whatsapp: userCredits?.data?.notification_whatsapp_balance || 0,
    voice: userCredits?.data?.notification_voice_balance || 0
  };

  // Get pricing directly from backend data
  const channelOptions = [
    { 
      id: "email", 
      name: "Email", 
      icon: Mail, 
      invitationPrice: creditPricing?.data?.invitation_email_price_naira || 10,
      notificationPrice: creditPricing?.data?.notification_email_price_naira || 10
    },
    { 
      id: "sms", 
      name: "SMS", 
      icon: MessageSquare, 
      invitationPrice: creditPricing?.data?.invitation_sms_price_naira || 10,
      notificationPrice: creditPricing?.data?.notification_sms_price_naira || 10
    },
    { 
      id: "whatsapp", 
      name: "WhatsApp", 
      icon: Phone, 
      invitationPrice: creditPricing?.data?.invitation_whatsapp_price_naira || 100,
      notificationPrice: creditPricing?.data?.notification_whatsapp_price_naira || 100
    },
    { 
      id: "voice", 
      name: "Voice Call", 
      icon: Volume2, 
      invitationPrice: creditPricing?.data?.invitation_voice_price_naira || 50,
      notificationPrice: creditPricing?.data?.notification_voice_price_naira || 50
    }
  ];

  const tabs = [
    { id: "send", name: "Send Invitations", icon: Send },
    { id: "credits", name: "Credit Store", icon: CreditCard },
    { id: "settings", name: "Auto Settings", icon: Users }
  ];

  const handleGroupSelection = (groupId) => {
    setSelectedGroups(prev => 
      prev.includes(groupId) 
        ? prev.filter(id => id !== groupId)
        : [...prev, groupId]
    );
  };

  const handleGroupExpand = (groupId) => {
    setExpandedGroups(prev => ({
      ...prev,
      [groupId]: !prev[groupId]
    }));
  };

  const handleChannelSelection = (channelId) => {
    if (channelId === "voice") {
      setShowVoiceRecorder(!selectedChannels.includes(channelId));
    }
    
    setSelectedChannels(prev => 
      prev.includes(channelId) 
        ? prev.filter(id => id !== channelId)
        : [...prev, channelId]
    );
  };

  const addToCart = (creditType, channel, quantity) => {
    const existing = cart.find(item => item.creditType === creditType && item.channel === channel);
    if (existing) {
      setCart(prev => prev.map(item => 
        item.creditType === creditType && item.channel === channel
          ? { ...item, quantity: item.quantity + quantity }
          : item
      ));
    } else {
      const channelInfo = channelOptions.find(c => c.id === channel);
      const price = creditType === "invitation" ? channelInfo.invitationPrice : channelInfo.notificationPrice;
      setCart(prev => [...prev, {
        creditType,
        channel,
        quantity,
        price,
        total: price * quantity,
        channelName: channelInfo.name
      }]);
    }
  };

  const removeFromCart = (index) => {
    setCart(prev => prev.filter((_, i) => i !== index));
  };

  const calculateCartTotal = () => {
    return cart.reduce((total, item) => total + item.total, 0);
  };

  const handlePurchaseCredits = async () => {
    const creditsData = cart.map(item => ({
      type: item.creditType,
      channel: item.channel,
      quantity: item.quantity
    }));

    const purchaseData = {
      currency: "NGN",
      path: window.location.href,
      credits: creditsData
    };

    await purchaseCredits(purchaseData);
  };

  const getSelectedGuestCount = () => {
    return selectedGroups.reduce((total, groupId) => {
      const group = guestGroups.find(g => g.id === groupId);
      return total + (group ? group.count : 0);
    }, 0);
  };

  // Get default discounts only (not partner discounts)
  const defaultDiscounts = discounts?.data?.filter(discount => discount.type === "default") || [];

  // Navigate to checkout URL when purchase is successful
  useEffect(() => {
    if (purchaseSuccess && purchaseData?.data?.payment_data?.checkoutUrl) {
      window.location.href = purchaseData.data.payment_data.checkoutUrl;
    }
  }, [purchaseSuccess, purchaseData]);

  const handleAutoSettingsUpdate = async () => {
    try {
      let reminderRecordingUrl = existingReminderUrl;
      let thankYouRecordingUrl = existingThankYouUrl;

      // Upload reminder recording if there's a new one
      if (reminderRecording && typeof reminderRecording !== 'string') {
        reminderRecordingUrl = await handleFileUpload(reminderRecording);
      }

      // Upload thank you recording if there's a new one
      if (thankYouRecording && typeof thankYouRecording !== 'string') {
        thankYouRecordingUrl = await handleFileUpload(thankYouRecording);
      }

      const autoSettings = {
        auto_settings: {
          auto_reminder: {
            active: autoReminder,
            recording: reminderRecordingUrl
          },
          auto_thankyou: {
            active: autoThankYou,
            recording: thankYouRecordingUrl
          }
        },
        reminder_notification: reminderChannels,
        thankyou_notification: thankYouChannels
      };
      
      await updateEvent(autoSettings);
    } catch (error) {
      console.error("Error updating auto settings:", error);
    }
  };

  const handleReminderChannelChange = (channelId) => {
    setReminderChannels(prev => ({
      ...prev,
      [channelId]: !prev[channelId]
    }));
  };

  const handleThankYouChannelChange = (channelId) => {
    setThankYouChannels(prev => ({
      ...prev,
      [channelId]: !prev[channelId]
    }));
  };

  if (loadingUserCredits || loadingPricing || loadingDiscounts) {
    return <Loader />;
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="border-b border-gray-200">
        <div className="flex justify-between items-center pb-4">
          <div>
            <h1 className="text-2xl font-semibold text-gray-900">Invitation Management</h1>
            <p className="text-gray-600">Manage invitations and communication credits for your event</p>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="flex space-x-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.id
                  ? "border-purple-500 text-purple-600"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
            >
              <tab.icon size={16} />
              <span>{tab.name}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Credit Balance Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-blue-50 p-4 rounded-lg">
          <h3 className="font-medium text-gray-900 mb-3">Invitation Credits</h3>
          <div className="space-y-2">
            {channelOptions.map(channel => (
              <div key={channel.id} className="flex justify-between items-center">
                <div className="flex items-center space-x-2">
                  <channel.icon size={16} className="text-gray-600" />
                  <span className="text-sm">{channel.name}</span>
                </div>
                <span className="font-medium">{invitationCredits[channel.id] || 0}</span>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-green-50 p-4 rounded-lg">
          <h3 className="font-medium text-gray-900 mb-3">Notification Credits</h3>
          <div className="space-y-2">
            {channelOptions.map(channel => (
              <div key={channel.id} className="flex justify-between items-center">
                <div className="flex items-center space-x-2">
                  <channel.icon size={16} className="text-gray-600" />
                  <span className="text-sm">{channel.name}</span>
                </div>
                <span className="font-medium">{notificationCredits[channel.id] || 0}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Tab Content */}
      {activeTab === "send" && (
        <div className="space-y-6">
          {/* Channel Selection */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4">Select Invitation Channels</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {channelOptions.map(channel => (
                <button
                  key={channel.id}
                  onClick={() => handleChannelSelection(channel.id)}
                  className={`p-4 border rounded-lg text-left transition-colors ${
                    selectedChannels.includes(channel.id)
                      ? "border-purple-500 bg-purple-50"
                      : "border-gray-200 hover:border-gray-300"
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <channel.icon size={20} className={selectedChannels.includes(channel.id) ? "text-purple-600" : "text-gray-600"} />
                    <div className="flex-1">
                      <p className="font-medium text-gray-900">{channel.name}</p>
                      <p className="text-sm text-gray-600">₦{channel.invitationPrice} per invitation</p>
                      <p className="text-xs text-gray-500">Available: {invitationCredits[channel.id]} credits</p>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Voice Recording */}
          {showVoiceRecorder && selectedChannels.includes("voice") && (
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">Voice Invitation Recording</h3>
              <VoiceRecorder
                onRecordingComplete={setVoiceRecording}
                existingRecording={voiceRecording}
              />
            </div>
          )}

          {/* Guest Groups Selection */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4">Select Guest Groups to Invite</h3>
            <div className="space-y-3">
              {guestGroups.map(group => (
                <div key={group.id} className="border border-gray-200 rounded-lg">
                  <div className="flex items-center justify-between p-4">
                    <div className="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        checked={selectedGroups.includes(group.id)}
                        onChange={() => handleGroupSelection(group.id)}
                        className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                      />
                      <div className="flex-1">
                        <p className="font-medium text-gray-900">{group.name}</p>
                        <p className="text-sm text-gray-600">{group.count} guests • From: {group.eventName}</p>
                      </div>
                    </div>
                    <button
                      onClick={() => handleGroupExpand(group.id)}
                      className="p-1 text-gray-400 hover:text-gray-600"
                    >
                      {expandedGroups[group.id] ? (
                        <ChevronDown size={20} />
                      ) : (
                        <ChevronRight size={20} />
                      )}
                    </button>
                  </div>

                  {/* Expanded Guest List */}
                  {expandedGroups[group.id] && (
                    <div className="border-t border-gray-200 bg-gray-50 p-4">
                      <div className="space-y-2">
                        {group.guests.map(guest => (
                          <div key={guest.id} className="flex items-center space-x-3 text-sm">
                            <Users size={16} className="text-gray-400" />
                            <div>
                              <span className="font-medium text-gray-900">{guest.name}</span>
                              <span className="text-gray-500 ml-2">{guest.email}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          {/* Discounts Info */}
          {defaultDiscounts.length > 0 && (
            <div className="bg-yellow-50 p-4 rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">Available Discounts</h4>
              <div className="text-sm text-gray-600 space-y-1">
                {defaultDiscounts.map((discount, index) => (
                  <p key={index}>• {discount.no_of_invites}+ credits: {discount.percent}% discount</p>
                ))}
              </div>
            </div>
          )}

          {/* Send Summary */}
          {selectedGroups.length > 0 && selectedChannels.length > 0 && (
            <div className="bg-purple-50 p-4 rounded-lg">
              <div className="flex justify-between items-center">
                <div>
                  <p className="text-sm text-gray-600">
                    Sending to {getSelectedGuestCount()} guests via {selectedChannels.length} channels
                  </p>
                  <p className="text-lg font-medium text-purple-600">
                    Selected Groups: {selectedGroups.length}
                  </p>
                </div>
                <Button 
                  buttonText="Send Invitations"
                  buttonColor="bg-purple-600 hover:bg-purple-700"
                  textColor="text-white"
                />
              </div>
            </div>
          )}
        </div>
      )}

      {activeTab === "credits" && (
        <div className="space-y-6">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-medium text-gray-900">Credit Store</h3>
            {cart.length > 0 && (
              <div className="flex items-center space-x-2 text-purple-600">
                <ShoppingCart size={20} />
                <span className="font-medium">{cart.length} items in cart</span>
              </div>
            )}
          </div>

          {/* Credit Purchase Interface */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="border rounded-lg p-6">
              <h4 className="text-md font-medium text-gray-900 mb-4">Invitation Credits</h4>
              <p className="text-sm text-gray-600 mb-4">For sending initial event invitations</p>
              
              <div className="space-y-4">
                {channelOptions.map(channel => (
                  <div key={channel.id} className="flex items-center justify-between p-3 border border-gray-200 rounded">
                    <div className="flex items-center space-x-3">
                      <channel.icon size={16} />
                      <span className="text-sm font-medium">{channel.name}</span>
                      <span className="text-xs text-gray-500">₦{channel.invitationPrice} each</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input
                        type="number"
                        min="1"
                        placeholder="Qty"
                        className="w-16 px-2 py-1 border border-gray-300 rounded text-xs"
                        onKeyPress={(e) => {
                          if (e.key === 'Enter') {
                            const quantity = parseInt(e.target.value);
                            if (quantity > 0) {
                              addToCart("invitation", channel.id, quantity);
                              e.target.value = '';
                            }
                          }
                        }}
                      />
                      <button 
                        onClick={(e) => {
                          const input = e.target.previousElementSibling;
                          const quantity = parseInt(input.value);
                          if (quantity > 0) {
                            addToCart("invitation", channel.id, quantity);
                            input.value = '';
                          }
                        }}
                        className="bg-blue-500 text-white px-3 py-1 rounded text-xs hover:bg-blue-600"
                      >
                        Add
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="border rounded-lg p-6">
              <h4 className="text-md font-medium text-gray-900 mb-4">Notification Credits</h4>
              <p className="text-sm text-gray-600 mb-4">For reminders, thank you messages, and broadcasts</p>
              
              <div className="space-y-4">
                {channelOptions.map(channel => (
                  <div key={channel.id} className="flex items-center justify-between p-3 border border-gray-200 rounded">
                    <div className="flex items-center space-x-3">
                      <channel.icon size={16} />
                      <span className="text-sm font-medium">{channel.name}</span>
                      <span className="text-xs text-gray-500">₦{channel.notificationPrice} each</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input
                        type="number"
                        min="1"
                        placeholder="Qty"
                        className="w-16 px-2 py-1 border border-gray-300 rounded text-xs"
                        onKeyPress={(e) => {
                          if (e.key === 'Enter') {
                            const quantity = parseInt(e.target.value);
                            if (quantity > 0) {
                              addToCart("notification", channel.id, quantity);
                              e.target.value = '';
                            }
                          }
                        }}
                      />
                      <button 
                        onClick={(e) => {
                          const input = e.target.previousElementSibling;
                          const quantity = parseInt(input.value);
                          if (quantity > 0) {
                            addToCart("notification", channel.id, quantity);
                            input.value = '';
                          }
                        }}
                        className="bg-green-500 text-white px-3 py-1 rounded text-xs hover:bg-green-600"
                      >
                        Add
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Shopping Cart */}
          {cart.length > 0 && (
            <div className="border rounded-lg p-6 bg-purple-50">
              <h4 className="text-md font-medium text-gray-900 mb-4 flex items-center space-x-2">
                <ShoppingCart size={20} />
                <span>Shopping Cart</span>
              </h4>
              
              <div className="space-y-3">
                {cart.map((item, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-white rounded border">
                    <div className="flex-1">
                      <p className="font-medium text-gray-900">
                        {item.channelName} {item.creditType === "invitation" ? "Invitation" : "Notification"} Credits
                      </p>
                      <p className="text-sm text-gray-600">
                        ₦{item.price} × {item.quantity} = ₦{item.total}
                      </p>
                    </div>
                    <button
                      onClick={() => removeFromCart(index)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <Trash2 size={16} />
                    </button>
                  </div>
                ))}
              </div>

              <div className="border-t mt-4 pt-4 flex justify-between items-center">
                <div>
                  <p className="text-lg font-medium text-gray-900">
                    Total: ₦{calculateCartTotal()}
                  </p>
                  <p className="text-sm text-gray-600">{cart.length} items</p>
                </div>
                <Button 
                  buttonText={purchasingCredits ? "Processing..." : "Proceed to Payment"}
                  buttonColor="bg-purple-600 hover:bg-purple-700"
                  textColor="text-white"
                  onClick={handlePurchaseCredits}
                  disabled={purchasingCredits}
                />
              </div>
            </div>
          )}

          {/* Bulk Purchase Discounts */}
          {defaultDiscounts.length > 0 && (
            <div className="bg-yellow-50 p-4 rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">Bulk Purchase Discounts</h4>
              <div className="text-sm text-gray-600 space-y-1">
                {defaultDiscounts.map((discount, index) => (
                  <p key={index}>• {discount.no_of_invites}+ credits: {discount.percent}% discount</p>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {activeTab === "settings" && (
        <div className="space-y-6">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-medium text-gray-900">Automated Settings</h3>
            <Button 
              buttonText={updatingEvent || uploadingFile ? "Saving..." : "Save Settings"}
              buttonColor="bg-purple-600 hover:bg-purple-700"
              textColor="text-white"
              onClick={handleAutoSettingsUpdate}
              disabled={updatingEvent || uploadingFile}
            />
          </div>
          
          {/* Auto Reminder Settings */}
          <div className="border rounded-lg p-6">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <h4 className="font-medium text-gray-900 mb-2">24-Hour Auto Reminder</h4>
                <p className="text-sm text-gray-600 mb-4">
                  Automatically send reminder messages to guests who haven't responded 24 hours before the event.
                </p>
              </div>

              <div className="ml-4">
                <button
                  onClick={() => setAutoReminder(!autoReminder)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 ${
                    autoReminder ? "bg-purple-600" : "bg-gray-200"
                  }`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      autoReminder ? "translate-x-6" : "translate-x-1"
                    }`}
                  />
                </button>
              </div>
            </div>
            
            {autoReminder && (
              <div className="space-y-4">
                <h5 className="font-medium text-gray-800">Select Reminder Channels:</h5>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {channelOptions.map(channel => (
                    <label key={channel.id} className="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        checked={reminderChannels[channel.id]}
                        onChange={() => handleReminderChannelChange(channel.id)}
                        className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                      />
                      <div className="flex items-center space-x-2">
                        <channel.icon size={16} />
                        <span className="text-sm">{channel.name}</span>
                        <span className="text-xs text-gray-500">(₦{channel.notificationPrice})</span>
                      </div>
                    </label>
                  ))}
                </div>
                
                {reminderChannels.voice && (
                  <div className="mt-4">
                    <h5 className="font-medium text-gray-800 mb-2">Voice Recording for Reminder:</h5>
                    {existingReminderUrl && !reminderRecording && (
                      <div className="mb-4 p-3 bg-blue-50 rounded">
                        <p className="text-sm text-gray-700 mb-2">Existing recording:</p>
                        <audio controls className="w-full">
                          <source src={existingReminderUrl} type="audio/mpeg" />
                          Your browser does not support the audio element.
                        </audio>
                      </div>
                    )}
                    <VoiceRecorder
                      onRecordingComplete={setReminderRecording}
                      existingRecording={reminderRecording}
                    />
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Auto Thank You Settings */}
          <div className="border rounded-lg p-6">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <h4 className="font-medium text-gray-900 mb-2">Auto Thank You Messages</h4>
                <p className="text-sm text-gray-600 mb-4">
                  Automatically send thank you messages to guests after the event ends.
                </p>
              </div>

              <div className="ml-4">
                <button
                  onClick={() => setAutoThankYou(!autoThankYou)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 ${
                    autoThankYou ? "bg-purple-600" : "bg-gray-200"
                  }`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      autoThankYou ? "translate-x-6" : "translate-x-1"
                    }`}
                  />
                </button>
              </div>
            </div>
            
            {autoThankYou && (
              <div className="space-y-4">
                <h5 className="font-medium text-gray-800">Select Thank You Channels:</h5>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {channelOptions.map(channel => (
                    <label key={channel.id} className="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        checked={thankYouChannels[channel.id]}
                        onChange={() => handleThankYouChannelChange(channel.id)}
                        className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                      />
                      <div className="flex items-center space-x-2">
                        <channel.icon size={16} />
                        <span className="text-sm">{channel.name}</span>
                        <span className="text-xs text-gray-500">(₦{channel.notificationPrice})</span>
                      </div>
                    </label>
                  ))}
                </div>
                
                {thankYouChannels.voice && (
                  <div className="mt-4">
                    <h5 className="font-medium text-gray-800 mb-2">Voice Recording for Thank You:</h5>
                    {existingThankYouUrl && !thankYouRecording && (
                      <div className="mb-4 p-3 bg-blue-50 rounded">
                        <p className="text-sm text-gray-700 mb-2">Existing recording:</p>
                        <audio controls className="w-full">
                          <source src={existingThankYouUrl} type="audio/mpeg" />
                          Your browser does not support the audio element.
                        </audio>
                      </div>
                    )}
                    <VoiceRecorder
                      onRecordingComplete={setThankYouRecording}
                      existingRecording={thankYouRecording}
                    />
                  </div>
                )}
                
                <div className="mt-4 p-3 bg-blue-50 rounded">
                  <p className="text-sm text-blue-700">
                    <strong>Tip:</strong> Thank you messages will be sent 2 hours after your event end time.
                  </p>
                </div>
              </div>
            )}
          </div>

          {/* Auto Settings Info */}
          <div className="bg-gray-50 p-4 rounded-lg">
            <h4 className="font-medium text-gray-900 mb-2">Important Notes</h4>
            <div className="text-sm text-gray-600 space-y-1">
              <p>• Automated messages use your notification credits</p>
              <p>• You can disable automation anytime before the scheduled time</p>
              <p>• Make sure you have sufficient credits before the event</p>
              <p>• Voice recordings can be set up separately for each automation</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InvitationManagementTab;